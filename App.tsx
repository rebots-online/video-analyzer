import { useState, useRef, useEffect, useCallback } from 'react';
import { Theme, applyTheme } from './src/themes';

// Type definitions
interface Timestamp {
  time: number;
  text: string;
  objects?: string[];
}

interface VideoAnalysis {
  summary: string;
  timestamps: Timestamp[];
}

// Format seconds to MM:SS
const formatTime = (seconds: number): string => {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}:${secs.toString().padStart(2, '0')}`;
};

const App = () => {
  // State management
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const [analysis, setAnalysis] = useState<VideoAnalysis | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [theme, setTheme] = useState<Theme>('dark-skeuo');
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Apply theme on component mount and when theme changes
  useEffect(() => {
    applyTheme(theme);
  }, [theme]);

  // Handle file selection and analysis
  const handleFileSelect = useCallback(async (file: File) => {
    try {
      setLoading(true);
      setError(null);
      
      // Create a URL for the video preview
      const url = URL.createObjectURL(file);
      setVideoUrl(url);
      
      // Simulate API call for analysis
      const mockAnalysis: VideoAnalysis = {
        summary: 'This is a mock analysis of the video content. In a real application, this would be generated by an AI model.',
        timestamps: [
          { time: 0, text: 'Introduction to the video content' },
          { time: 30, text: 'Main topic discussion begins' },
          { time: 90, text: 'Key insights and analysis' },
          { time: 150, text: 'Conclusion and summary' },
        ],
      };
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      setAnalysis(mockAnalysis);
      
    } catch (err) {
      console.error('Error processing video:', err);
      setError('Failed to process the video. Please try again.');
    } finally {
      setLoading(false);
    }
  }, []);

  // Handle file input change
  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleFileSelect(file);
    }
  };

  // Handle file drop
  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file && file.type.startsWith('video/')) {
      handleFileSelect(file);
    }
  }, [handleFileSelect]);

  // Handle drag over
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  // Handle timestamp click
  const handleTimestampClick = (time: number) => {
    // In a real app, this would seek the video to the specified time
    console.log(`Seek to ${time} seconds`);
  };

  // Render upload area
  const renderUploadArea = () => (
    <div 
      className="upload-area"
      onDrop={handleDrop}
      onDragOver={handleDragOver}
    >
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileInputChange}
        accept="video/*"
        style={{ display: 'none' }}
      />
      <button 
        className="upload-button"
        onClick={() => fileInputRef.current?.click()}
        disabled={loading}
      >
        {loading ? 'Processing...' : 'Select Video File'}
      </button>
      <p className="upload-hint">or drag and drop a video file here</p>
    </div>
  );

  // Render analysis results
  const renderAnalysis = () => (
    <div className="analysis-container">
      <div className="video-preview">
        {videoUrl && (
          <video 
            src={videoUrl} 
            controls 
            className="video-player"
          />
        )}
      </div>
      <div className="analysis-results">
        <h2>Analysis Results</h2>
        {analysis?.summary && (
          <div className="summary">
            <h3>Summary</h3>
            <p>{analysis.summary}</p>
          </div>
        )}
        {analysis?.timestamps && analysis.timestamps.length > 0 && (
          <div className="timestamps">
            <h3>Key Moments</h3>
            <ul>
              {analysis.timestamps.map((item, index) => (
                <li 
                  key={index} 
                  className="timestamp-item"
                  onClick={() => handleTimestampClick(item.time)}
                >
                  <span className="time">{formatTime(item.time)}</span>
                  <span className="text">{item.text}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="app">
      <header className="app-header">
        <h1>Video Analyzer</h1>
        <p>Upload a video to analyze its content and generate timestamps</p>
      </header>
      
      <main className="app-content">
        {!videoUrl ? renderUploadArea() : renderAnalysis()}
        
        {error && (
          <div className="error-message">
            <p>{error}</p>
            <button onClick={() => setError(null)}>Dismiss</button>
          </div>
        )}
      </main>
      
      <footer className="app-footer">
        <p>Video Analyzer &copy; {new Date().getFullYear()}</p>
      </footer>
    </div>
  );
};

export default App;
